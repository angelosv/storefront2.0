{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport { CardElement, injectStripe, Elements, StripeProvider } from 'react-stripe-elements';\nimport { useMutation } from '@apollo/react-hooks';\nimport { closeModal } from '@redq/reuse-modal';\nimport { GET_PAYMENT } from 'graphql/mutation/order';\nimport StripeFormWrapper, { Heading, FieldWrapper } from './StripePaymentForm.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nvar StripeForm = injectStripe(function (_ref) {\n  var getToken = _ref.getToken,\n      buttonText = _ref.buttonText,\n      stripe = _ref.stripe;\n\n  var _useContext = useContext(ProfileContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var handleSubmit = function handleSubmit() {\n    var _await$stripe$createT, token;\n\n    return _regeneratorRuntime.async(function handleSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(stripe.createToken({\n              name: 'Name'\n            }));\n\n          case 2:\n            _await$stripe$createT = _context.sent;\n            token = _await$stripe$createT.token;\n            getToken(token);\n\n            if (token) {\n              dispatch({\n                type: 'ADD_CARD',\n                payload: token.card\n              });\n              closeModal();\n            }\n\n            console.log(token, 'token');\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return __jsx(StripeFormWrapper, null, __jsx(Heading, null, \"Enter card info\"), __jsx(FieldWrapper, null, __jsx(CardElement, null)), __jsx(\"button\", {\n    type: \"button\",\n    onClick: handleSubmit\n  }, buttonText ? buttonText : 'Pay Now'));\n});\n\nvar StripePaymentForm = function StripePaymentForm(_ref2) {\n  var _ref2$item = _ref2.item,\n      price = _ref2$item.price,\n      buttonText = _ref2$item.buttonText;\n\n  var _useMutation = useMutation(GET_PAYMENT),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      getPayment = _useMutation2[0];\n\n  var sendTokenToServer = function sendTokenToServer(token) {\n    var payment_info;\n    return _regeneratorRuntime.async(function sendTokenToServer$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getPayment({\n              variables: {\n                paymentInput: JSON.stringify({\n                  token: token,\n                  amount: price\n                })\n              }\n            }));\n\n          case 2:\n            payment_info = _context2.sent;\n            console.log(payment_info, 'payment_info');\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return true && __jsx(StripeProvider, {\n    apiKey: process.env.STRIPE_PUBLIC_KEY\n  }, __jsx(\"div\", {\n    className: \"example\"\n  }, __jsx(Elements, null, __jsx(StripeForm, {\n    getToken: function getToken(token) {\n      return sendTokenToServer(token);\n    },\n    buttonText: buttonText\n  }))));\n};\n\nexport default StripePaymentForm;","map":null,"metadata":{},"sourceType":"module"}